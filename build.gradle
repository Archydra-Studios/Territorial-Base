plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name ="Siphalor"
		url = "https://maven.siphalor.de"
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url 'https://jitpack.io' }
}

loom {
	accessWidenerPath =  file("src/main/resources/territorial.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// LibGUI (For GUI stuff)
	modImplementation(include("io.github.cottonmc:LibGui:${project.libgui_version}"))

	// Cloth Config
	modApi(include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}")) {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// NBT Crafting
	modImplementation(include("de.siphalor:nbtcrafting-1.18:${project.nbtcrafing_version}")) {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Patchouli
	modImplementation(include("vazkii.patchouli:Patchouli:${project.patchouli_version}")) {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Mod Menu
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Roughly Enough Items
	modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// H2 stuff
	//implementation(include("com.h2database:h2:${project.h2_version}"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// Open the local H2 database viewer
task openDBViewer(type: Exec) {
	workingDir "build/libs/territorial-${project.version}/META-INF/jars"
	commandLine "java", "-jar", "h2-${project.h2_version}.jar"
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	it.options.release = 17
}

jar {
	from "LICENSE"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
	}
}